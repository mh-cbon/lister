// Package lister is a generator to generate typed slice.
package main

import (
	"bytes"
	"flag"
	"fmt"
	"io"
	"os"
	"os/exec"
	"strings"

	"github.com/mh-cbon/astutil"
)

var name = "lister"
var version = "0.0.0"

//go:generate lister basic_gen.go string:StringSlice

func main() {

	var help bool
	var h bool
	var ver bool
	var v bool
	var p string
	flag.BoolVar(&help, "help", false, "Show help.")
	flag.BoolVar(&h, "h", false, "Show help.")
	flag.BoolVar(&ver, "version", false, "Show version.")
	flag.BoolVar(&v, "v", false, "Show version.")
	flag.StringVar(&p, "p", os.Getenv("GOPACKAGE"), "Package name of the new code.")

	flag.Parse()

	if ver || v {
		showVer()
		return
	}
	if help || h {
		showHelp()
		return
	}

	if flag.NArg() < 2 {
		panic("wrong usage")
	}
	args := flag.Args()

	dest := os.Stdout

	o := args[0]
	restargs := args[1:]

	if o != "-" {
		f, err := os.Create(o)
		if err != nil {
			panic(err)
		}
		dest = f
		defer func() {
			f.Close()
			exec.Command("go", "fmt", args[0]).Run()
		}()
	}

	fmt.Fprintf(dest, "package %v\n\n", p)
	fmt.Fprintln(dest, `// file generated by`)
	fmt.Fprintln(dest, `// github.com.mh-cbon/`+name)
	fmt.Fprintln(dest, `// do not edit`)
	fmt.Fprintln(dest, ``)

	for _, todo := range restargs {
		srcName, destName := splitTypeArg(todo)
		res := processType(destName, srcName)
		io.Copy(dest, &res)
	}
}

func splitTypeArg(todo string) (src string, dest string) {
	y := strings.Split(todo, ":")
	if len(y) != 2 {
		panic("wrong name " + todo)
	}
	return y[0], y[1]
}

func showVer() {
	fmt.Printf("%v %v\n", name, version)
}

func showHelp() {
	showVer()
	fmt.Println()
	fmt.Println("Usage")
	fmt.Println()
	fmt.Printf("	%v [-p name] [out] [...types]\n\n", name)
	fmt.Printf("	out: 	Output destination of the results, use '-' for stdout.\n")
	fmt.Printf("	types:	A list of types such as src:dst.\n")
	fmt.Printf("	-p:			The name of the package output.\n")
	fmt.Println()
}

func processType(destName, srcName string) bytes.Buffer {

	destPointed := astutil.GetPointedType(destName)
	destConcrete := astutil.GetUnpointedType(destName)
	srcIsPointer := astutil.IsAPointedType(srcName)
	srcIsBasic := astutil.IsBasic(srcName)

	var b bytes.Buffer
	dest := &b

	fmt.Fprintf(dest, `// %v implements a typed slice of %v`, destConcrete, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `type %v struct {items []%v}`, destConcrete, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// New%v creates a new typed slice of %v`, destConcrete, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func New%v() %v {
 return &%v{items: []%v{}}
}`, destConcrete, destPointed, destConcrete, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Push appends every %v`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Push(x ...%v) %v {
 t.items = append(t.items, x...)
 return t
}`, destPointed, srcName, destPointed)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Unshift prepends every %v`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Unshift(x ...%v) %v {
	t.items = append(x, t.items...)
	return t
}`, destPointed, srcName, destPointed)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Pop removes then returns the last %v.`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Pop() %v {
 var ret %v
 if len(t.items)>0 {
  ret = t.items[len(t.items)-1]
  t.items = append(t.items[:0], t.items[len(t.items)-1:]...)
 }
 return ret
}`, destPointed, srcName, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Shift removes then returns the first %v.`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Shift() %v {
  var ret %v
  if len(t.items)>0 {
    ret = t.items[0]
    t.items = append(t.items[:0], t.items[1:]...)
  }
  return ret
}`, destPointed, srcName, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Index of given %v. It must implements Ider interface.`, srcName)
	fmt.Fprintln(dest, "")
	if srcIsBasic == false {
		fmt.Fprintf(dest, `func (t %v) Index(s %v) int {
	  ret := -1
	  for i,item:= range t.items {
			if s.GetID()==item.GetID() {
				ret = i
				break
			}
	  }
	  return ret
	}`, destPointed, srcName)
	} else if srcIsPointer && srcIsBasic { // needed ?
		fmt.Fprintf(dest, `func (t %v) Index(s %v) int {
	  ret := -1
	  for i,item:= range t.items {
			if *s==*item {
				ret = i
				break
			}
	  }
	  return ret
	}`, destPointed, srcName)
	} else {
		fmt.Fprintf(dest, `func (t %v) Index(s %v) int {
	  ret := -1
	  for i,item:= range t.items {
			if s==item {
				ret = i
				break
			}
	  }
	  return ret
	}`, destPointed, srcName)
	}

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// RemoveAt removes a %v at index i.`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) RemoveAt(i int) bool {
  if i>=0 && i<len(t.items) {
    t.items = append(t.items[:i], t.items[i+1:]...)
		return true
  }
  return false
}`, destPointed)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Remove removes given %v`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Remove(s %v) bool {
  if i := t.Index(s); i > -1 {
    t.RemoveAt(i)
		return true
  }
  return false
}`, destPointed, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// InsertAt adds given %v at index i`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) InsertAt(i int, s %v) %v {
	if i<0 || i >= len(t.items) {
		return t
	}
	res := []%v{}
	res = append(res, t.items[:0]...)
	res = append(res, s)
	res = append(res, t.items[i:]...)
	t.items = res
	return t
}`, destPointed, srcName, destPointed, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Splice removes and returns a slice of %v, starting at start, ending at start+length.`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `// If any s is provided, they are inserted in place of the removed slice.`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Splice(start int, length int, s ...%v) []%v {
	var ret []%v
	for i := 0; i < len(t.items); i++ {
		if i >= start && i < start+length {
			ret = append(ret, t.items[i])
		}
	}
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		t.items = append(
			t.items[:start],
			append(s,
				t.items[start+length:]...,
			)...,
		)
	}
  return ret
}`, destPointed, srcName, srcName, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Slice returns a copied slice of %v, starting at start, ending at start+length.`, srcName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Slice(start int, length int) []%v {
  var ret []%v
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		ret = t.items[start:start+length]
	}
	return ret
}`, destPointed, srcName, srcName)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Reverse the slice.`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Reverse() %v {
  for i, j := 0, len(t.items)-1; i < j; i, j = i+1, j-1 {
    t.items[i], t.items[j] = t.items[j], t.items[i]
  }
  return t
}`, destPointed, destPointed)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Len of the slice.`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Len() int {
  return len(t.items)
}`, destPointed)

	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Set the slice.`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Set(x []%v) %v {
  t.items = append(t.items[:0], x...)
	return t
}`, destPointed, srcName, destPointed)
	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Get the slice.`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Get() []%v {
	return t.items
}`, destPointed, srcName)
	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// At return the item at index i.`)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) At(i int) %v {
	return t.items[i]
}`, destPointed, srcName)
	fmt.Fprintln(dest, "")

	fmt.Fprintf(dest, `// Filter return a new %v with all items satisfying f.`, destName)
	fmt.Fprintln(dest, "")
	fmt.Fprintf(dest, `func (t %v) Filter(f func(%v) bool) %v {
	ret := New%v()
	for _, i := range t.items {
		if f(i) {
			ret.Push(i)
		}
	}
	return ret
}`, destPointed, srcName, destPointed, destConcrete)
	fmt.Fprintln(dest, "")

	//todo: add support for struct properties.
	// somehow is hould be helpfull in regard to Filter.

	fmt.Fprintln(dest, "")

	return b
}
