package gen

// file generated by
// github.com/mh-cbon/lister
// do not edit

// StringSlice implements a typed slice of string
type StringSlice struct{ items []string }

// NewStringSlice creates a new typed slice of string
func NewStringSlice() *StringSlice {
	return &StringSlice{items: []string{}}
}

// Push appends every string
func (t *StringSlice) Push(x ...string) *StringSlice {
	t.items = append(t.items, x...)
	return t
}

// Unshift prepends every string
func (t *StringSlice) Unshift(x ...string) *StringSlice {
	t.items = append(x, t.items...)
	return t
}

// Pop removes then returns the last string.
func (t *StringSlice) Pop() string {
	var ret string
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
		t.items = append(t.items[:0], t.items[len(t.items)-1:]...)
	}
	return ret
}

// Shift removes then returns the first string.
func (t *StringSlice) Shift() string {
	var ret string
	if len(t.items) > 0 {
		ret = t.items[0]
		t.items = append(t.items[:0], t.items[1:]...)
	}
	return ret
}

// Index of given string. It must implements Ider interface.
func (t *StringSlice) Index(s string) int {
	ret := -1
	for i, item := range t.items {
		if s == item {
			ret = i
			break
		}
	}
	return ret
}

// Contains returns true if s in is t.
func (t *StringSlice) Contains(s string) bool {
	return t.Index(s) > -1
}

// RemoveAt removes a string at index i.
func (t *StringSlice) RemoveAt(i int) bool {
	if i >= 0 && i < len(t.items) {
		t.items = append(t.items[:i], t.items[i+1:]...)
		return true
	}
	return false
}

// Remove removes given string
func (t *StringSlice) Remove(s string) bool {
	if i := t.Index(s); i > -1 {
		t.RemoveAt(i)
		return true
	}
	return false
}

// InsertAt adds given string at index i
func (t *StringSlice) InsertAt(i int, s string) *StringSlice {
	if i < 0 || i >= len(t.items) {
		return t
	}
	res := []string{}
	res = append(res, t.items[:0]...)
	res = append(res, s)
	res = append(res, t.items[i:]...)
	t.items = res
	return t
}

// Splice removes and returns a slice of string, starting at start, ending at start+length.
// If any s is provided, they are inserted in place of the removed slice.
func (t *StringSlice) Splice(start int, length int, s ...string) []string {
	var ret []string
	for i := 0; i < len(t.items); i++ {
		if i >= start && i < start+length {
			ret = append(ret, t.items[i])
		}
	}
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		t.items = append(
			t.items[:start],
			append(s,
				t.items[start+length:]...,
			)...,
		)
	}
	return ret
}

// Slice returns a copied slice of string, starting at start, ending at start+length.
func (t *StringSlice) Slice(start int, length int) []string {
	var ret []string
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		ret = t.items[start : start+length]
	}
	return ret
}

// Reverse the slice.
func (t *StringSlice) Reverse() *StringSlice {
	for i, j := 0, len(t.items)-1; i < j; i, j = i+1, j-1 {
		t.items[i], t.items[j] = t.items[j], t.items[i]
	}
	return t
}

// Len of the slice.
func (t *StringSlice) Len() int {
	return len(t.items)
}

// Set the slice.
func (t *StringSlice) Set(x []string) *StringSlice {
	t.items = append(t.items[:0], x...)
	return t
}

// Get the slice.
func (t *StringSlice) Get() []string {
	return t.items
}

// At return the item at index i.
func (t *StringSlice) At(i int) string {
	return t.items[i]
}

// Filter return a new StringSlice with all items satisfying f.
func (t *StringSlice) Filter(filters ...func(string) bool) *StringSlice {
	ret := NewStringSlice()
	for _, i := range t.items {
		ok := true
		for _, f := range filters {
			ok = ok && f(i)
			if !ok {
				break
			}
		}
		if ok {
			ret.Push(i)
		}
	}
	return ret
}

// Map return a new StringSlice of each items modified by f.
func (t *StringSlice) Map(mappers ...func(string) string) *StringSlice {
	ret := NewStringSlice()
	for _, i := range t.items {
		val := i
		for _, m := range mappers {
			val = m(val)
		}
		ret.Push(val)
	}
	return ret
}

// First returns the first value or default.
func (t *StringSlice) First() string {
	var ret string
	if len(t.items) > 0 {
		ret = t.items[0]
	}
	return ret
}

// Last returns the last value or default.
func (t *StringSlice) Last() string {
	var ret string
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
	}
	return ret
}

// Empty returns true if the slice is empty.
func (t *StringSlice) Empty() bool {
	return len(t.items) == 0
}
