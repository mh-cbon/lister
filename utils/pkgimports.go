package utils

// file generated by
// github.com/mh-cbon/lister
// do not edit

// PkgImports implements a typed slice of PkgImport
type PkgImports struct{ items []PkgImport }

// NewPkgImports creates a new typed slice of PkgImport
func NewPkgImports() *PkgImports {
	return &PkgImports{items: []PkgImport{}}
}

// Push appends every PkgImport
func (t *PkgImports) Push(x ...PkgImport) *PkgImports {
	t.items = append(t.items, x...)
	return t
}

// Unshift prepends every PkgImport
func (t *PkgImports) Unshift(x ...PkgImport) *PkgImports {
	t.items = append(x, t.items...)
	return t
}

// Pop removes then returns the last PkgImport.
func (t *PkgImports) Pop() PkgImport {
	var ret PkgImport
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
		t.items = append(t.items[:0], t.items[len(t.items)-1:]...)
	}
	return ret
}

// Shift removes then returns the first PkgImport.
func (t *PkgImports) Shift() PkgImport {
	var ret PkgImport
	if len(t.items) > 0 {
		ret = t.items[0]
		t.items = append(t.items[:0], t.items[1:]...)
	}
	return ret
}

// Index of given PkgImport. It must implements Ider interface.
func (t *PkgImports) Index(s PkgImport) int {
	ret := -1
	for i, item := range t.items {
		if s.GetID() == item.GetID() {
			ret = i
			break
		}
	}
	return ret
}

// Contains returns true if s in is t.
func (t *PkgImports) Contains(s PkgImport) bool {
	return t.Index(s) > -1
}

// RemoveAt removes a PkgImport at index i.
func (t *PkgImports) RemoveAt(i int) bool {
	if i >= 0 && i < len(t.items) {
		t.items = append(t.items[:i], t.items[i+1:]...)
		return true
	}
	return false
}

// Remove removes given PkgImport
func (t *PkgImports) Remove(s PkgImport) bool {
	if i := t.Index(s); i > -1 {
		t.RemoveAt(i)
		return true
	}
	return false
}

// InsertAt adds given PkgImport at index i
func (t *PkgImports) InsertAt(i int, s PkgImport) *PkgImports {
	if i < 0 || i >= len(t.items) {
		return t
	}
	res := []PkgImport{}
	res = append(res, t.items[:0]...)
	res = append(res, s)
	res = append(res, t.items[i:]...)
	t.items = res
	return t
}

// Splice removes and returns a slice of PkgImport, starting at start, ending at start+length.
// If any s is provided, they are inserted in place of the removed slice.
func (t *PkgImports) Splice(start int, length int, s ...PkgImport) []PkgImport {
	var ret []PkgImport
	for i := 0; i < len(t.items); i++ {
		if i >= start && i < start+length {
			ret = append(ret, t.items[i])
		}
	}
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		t.items = append(
			t.items[:start],
			append(s,
				t.items[start+length:]...,
			)...,
		)
	}
	return ret
}

// Slice returns a copied slice of PkgImport, starting at start, ending at start+length.
func (t *PkgImports) Slice(start int, length int) []PkgImport {
	var ret []PkgImport
	if start >= 0 && start+length <= len(t.items) && start+length >= 0 {
		ret = t.items[start : start+length]
	}
	return ret
}

// Reverse the slice.
func (t *PkgImports) Reverse() *PkgImports {
	for i, j := 0, len(t.items)-1; i < j; i, j = i+1, j-1 {
		t.items[i], t.items[j] = t.items[j], t.items[i]
	}
	return t
}

// Len of the slice.
func (t *PkgImports) Len() int {
	return len(t.items)
}

// Set the slice.
func (t *PkgImports) Set(x []PkgImport) *PkgImports {
	t.items = append(t.items[:0], x...)
	return t
}

// Get the slice.
func (t *PkgImports) Get() []PkgImport {
	return t.items
}

// At return the item at index i.
func (t *PkgImports) At(i int) PkgImport {
	return t.items[i]
}

// Filter return a new PkgImports with all items satisfying f.
func (t *PkgImports) Filter(filters ...func(PkgImport) bool) *PkgImports {
	ret := NewPkgImports()
	for _, i := range t.items {
		ok := true
		for _, f := range filters {
			ok = ok && f(i)
			if !ok {
				break
			}
		}
		if ok {
			ret.Push(i)
		}
	}
	return ret
}

// Map return a new PkgImports of each items modified by f.
func (t *PkgImports) Map(mappers ...func(PkgImport) PkgImport) *PkgImports {
	ret := NewPkgImports()
	for _, i := range t.items {
		val := i
		for _, m := range mappers {
			val = m(val)
		}
		ret.Push(val)
	}
	return ret
}

// First returns the first value or default.
func (t *PkgImports) First() PkgImport {
	var ret PkgImport
	if len(t.items) > 0 {
		ret = t.items[0]
	}
	return ret
}

// Last returns the last value or default.
func (t *PkgImports) Last() PkgImport {
	var ret PkgImport
	if len(t.items) > 0 {
		ret = t.items[len(t.items)-1]
	}
	return ret
}

// Empty returns true if the slice is empty.
func (t *PkgImports) Empty() bool {
	return len(t.items) == 0
}

// FilterPkgImports provides filters for a struct.
var FilterPkgImports = struct {
	ByPath func(string) func(PkgImport) bool
	ByID   func(string) func(PkgImport) bool
}{
	ByPath: func(v string) func(PkgImport) bool { return func(o PkgImport) bool { return o.Path == v } },
	ByID:   func(v string) func(PkgImport) bool { return func(o PkgImport) bool { return o.ID == v } },
}
